<?php
namespace Cpm \ JovenesBundle \ Entity;

use Cpm \ JovenesBundle \ Filter \ ProyectoFilter;
use Doctrine \ ORM \ EntityRepository;

/**
 * ProyectoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProyectoRepository extends EntityRepository {
	
	static $sort_criteria = array("id" => "p.id" , "coordinador" => "coordinador.apellido", "titulo" => "p.titulo");
	
	function findAllQuery($ciclo = null) {
		$qb = $this->getEntityManager()->createQueryBuilder();

		$qb->add('select', 'p')->add('from', 'CpmJovenesBundle:Proyecto p');
		if ($ciclo) {
			$qb->andWhere('p.ciclo = :ciclo')->setParameter('ciclo', $ciclo);
		}
		return $qb->getQuery();

	}

	public function filterQuery(ProyectoFilter $data, $sort_field = null, $sort_order) {
		
		/*if ($filter->getFecha())
			$qb->andWhere('DATE(c.fecha) = :fecha')->setParameter('fecha',$filter->getFecha());
		if ($filter->getEmail())
			$qb->andWhere('c.email LIKE :email')->setParameter('email','%'.$filter->getEmail().'%');*/
		$qb = $this->createQueryBuilder('p')->innerJoin("p.coordinador", "coordinador");

		if ($sort_field) {
			$field = (isset(ProyectoRepository::$sort_criteria[$sort_field]))?ProyectoRepository::$sort_criteria[$sort_field]:ProyectoRepository::$sort_criteria['id'];
			$qb->orderBy($field,$sort_order);
		}
		
		

	/*	if ($ciclo) {
			//FIXME conseguir el ciclo
			$qb->andWhere('p.ciclo = :ciclo')->setParameter('ciclo', $ciclo);
		}*/
		
		if ($data->getEsPrimeraVezDocente()) {
			$pv = ($data->getEsPrimeraVezDocente() != 1)?0 : 1;
			$qb->andWhere('p.esPrimeraVezDocente = :pvd')->setParameter('pvd', $pv);
		}
		if ($data->getEsPrimeraVezAlumnos()) {
			$pv = ($data->getEsPrimeraVezAlumnos() != 1)?0 : 1;
			$qb->andWhere('p.esPrimeraVezAlumnos = :pva')->setParameter('pva', $pv);
		}
		
		if ($data->getEsPrimeraVezEscuela()) {
			$pv = ($data->getEsPrimeraVezEscuela() != 1)?0 : 1;
			$qb->andWhere('p.esPrimeraVezEscuela = :pve')->setParameter('pve', $pv);
		}
		
		if ($data->getProduccionFinal())
			$qb->andWhere('p.produccionFinal = :pf')->setParameter('pf', $data->getProduccionFinal());

		if ($data->getTemaPrincipal())
			$qb->andWhere('p.temaPrincipal = :tp')->setParameter('tp', $data->getTemaPrincipal());

		if ($escuela = $data->getEscuelaFilter()) {
	
			$tiene_escuela = false;
			if ($escuela->getLocalidad()) {
				$tiene_escuela = true;
				$qb->innerJoin('p.escuela', 'e')->innerJoin("e.localidad", 'l')->andWhere('l = :localidad')->setParameter('localidad', $escuela->getLocalidad());
			}
			elseif ($escuela->getDistrito()) {
				$tiene_escuela = true;
				$qb->innerJoin('p.escuela', 'e')->innerJoin("e.localidad", 'l')->innerJoin("l.distrito", 'd')->andWhere('d = :distrito')->setParameter('distrito', $escuela->getDistrito());
			}
			elseif ($escuela->getRegion() || $escuela->getRegionDesde() || $escuela->getRegionHasta()) //la region solo se considera si no se eligio ni la localidad ni el distrito 
			{
				$tiene_escuela = true;
				$qb->innerJoin('p.escuela', 'e')->innerJoin("e.localidad", 'l')->innerJoin("l.distrito", 'd')->innerJoin("d.region", 'r');

				if ($escuela->getRegion())
					$qb->andWhere('r = :region')->setParameter('region', $escuela->getRegion());
				else {
					if ($escuela->getRegionDesde())
						$qb->andWhere('r.id >= :regionDesde')->setParameter('regionDesde', $escuela->getRegionDesde());
					if ($escuela->getRegionHasta())
						$qb->andWhere('r.id <= :regionHasta')->setParameter('regionHasta', $escuela->getRegionHasta());
				};
			}

			if ($escuela->getOtroTipoInstitucion()) {
				if (!$tiene_escuela)
					$qb->innerJoin('p.escuela', 'e');
				$qb->andWhere('e.tipoInstitucion is NULL');
			}
			elseif ($escuela->getTipoInstitucion()) {
				if (!$tiene_escuela)
					$qb->innerJoin('p.escuela', 'e');

				$qb->innerJoin("e.tipoInstitucion", 't')->andWhere('t = :tipoInstitucion')->setParameter('tipoInstitucion', $escuela->getTipoInstitucion());
			}

			if (trim($escuela->getNombre()) != "") {
				$escuelaSel = trim($escuela->getNombre());
				if (!$tiene_escuela)
					$qb->innerJoin('p.escuela', 'e');

				if (is_numeric($escuelaSel)) {
					$qb->andWhere("e.numero = :numero")->setParameter("numero", $escuelaSel);
				} else {
					$qb->andWhere("e.nombre like :nombreEscuela")->setParameter("nombreEscuela", $escuelaSel .
					"%");
				}

			}

		}
		if (trim($data->getCoordinador()) != "") {

			$qb->andWhere("coordinador.apellido like :apellido")->setParameter("apellido", (trim($data->getCoordinador()) .
			"%"));
		}

		if ($archivo = $data->getArchivo()) {
			$qb->andWhere("p.archivo " . (($archivo == 1) ? 'is not' : 'is') . " NULL");
		}
		
		$evento = $data->getEventoFilter(); 
		if ($ev = $evento->getEvento()) {  
			if ($evento->getSinInvitacionFlag()) //sin invitacion 
			{ 
				$qb	->andWhere( 'p NOT IN ('.
											' SELECT proyecto FROM CpmJovenesBundle:Invitacion invit' .
											' INNER JOIN invit.proyecto proyecto ' .
											' INNER JOIN invit.instanciaEvento inst ' .
											' INNER JOIN inst.evento event'.
											' WHERE event = :ev)')->setParameter('ev',$ev);
			} else {
					$qb	->innerJoin('p.invitaciones','inv')
					->innerJoin('inv.instanciaEvento','instancia')
					->innerJoin('instancia.evento','ev')->andWhere('ev = :ev')->setParameter('ev',$ev);
				//$qb->andWhere('p.tipoInstitucion is NULL');
								 
			}		
		}

		return $qb;
	}

	function findAllInArray($ids = array ()) {
		$qb = $this->getEntityManager()->createQueryBuilder();

		$qb->add('select', 'p')->add('from', 'CpmJovenesBundle:Proyecto p')->andWhere("p.id in (:proyectos)")->setParameter("proyectos", array_values($ids));

		return $qb->getQuery();

	}
}